3. ФУНКЦИОНАЛЬНОЕ ЗАДАНИЕ

Оглавление 
1. Данные 
2. Применение для бизнеса
3. Аннотация к скрпиту 
4. Архитектура, схема


1. Данные

Данные для запроса:
/engines/(trade_engine_name) – торговая платформа
/markets/(market_name) – наименование рынка
/boards/(boardid) – класс актива
/boardgroups/(board_group_id) – вид актива
/securities/{secid} – наименование актива

В нашем задании мы выгружаем исторические данные по активам. Котировки ежедневные.

Данные по котировке:
"BOARDID", "TRADEDATE", "SHORTNAME", "SECID", "NUMTRADES", "VALUE", "OPEN", "LOW", "HIGH", "LEGALCLOSEPRICE", "WAPRICE", "CLOSE", "VOLUME", "MARKETPRICE2", "MARKETPRICE3", "ADMITTEDQUOTE", "MP2VALTRD", "MARKETPRICE3TRADESVALUE", "ADMITTEDVALUE", "WAVAL"

Используемые в работе:
"TRADEDATE" (дата), "OPEN" (цена открытия), "LOW" (мин. цена за день), "HIGH" (макс. цена за день), "CLOSE" (цена закрытия), "VOLUME" (объем сделок)

Структура данных:  

котировка:
- id (индекс)
- торговая платформа
- наименования рынка
- класс актива
- вид актива
- наименование актива (ключ)

показатели котировки: 
- наименование актива (ключ)
- дата (индекс)
- цена открытия
- цена закрытия
- мин цена за день
- макс цена за день

Взаимодействие данных:
у одной котировки есть только 1 таблица котировок (с датами) за определенный промежуток времени, это 1 ко 1

2. 
1) Построение графиков для дальнейшей интерпретации (интерпретация может быть автоматизирована)
2) Анализ исторических данных по различным метрикам для оценки активов (ликвидность, недооцененность/переоцененность, сезонность, тренды)
3) Построение прогнозов
4) Классификация, кластеризация активов для дальнейшего изучения групп активов входящих в группу
5) Глубокое обучние для нахождения новых взаимосвязей между активами
6) Идентификация фрод-поведения на рынке и спекуляций по поведению временных рядов
7) Обработка данных
8) Формирование отчета
9) Анализ результатов

3.
Работая над первым заданием, я старался автоматизировать шаги, которые сразу можно было быстро автоматизировать. Некоторые моменты я зафиксировал для следующей итерации и улчшения кода.

Описание функций:
1) choose_stock_numb()

входные переменные – start (стартовая дата), end (конечная дата), engines (торговая платформа), markets (рынок), boards (вид актива), sec_name (название актива)

Данная функция была создана для возможности скачивания названия бумаги по индексу в массиве. Пользователь вряд-ли будет помнить название каждой бумаги. Я изначально загрузил все доступные акции (а именно сокращенные названия бумаг) биржи на конец декабря.

улучшение – определение ресурса, откуда можно было бы получать актуальную информацию о доступных бумагах (security name) на бирже, а не хранение файла с названиями локально

2) get_data_request()

входные переменные – engines (торговая платформа), markets (рынок), boards (вид актива), sec_name (название актива)

По названию можно получить примерное понимание. Данная функция делает запрос на биржу, получает данные в формате .json, далее распаковывает их, в итоге возвращает pandas объект. Также в этой функции учтено, что запрос может вернуть None, в этом случае выведется строчка warning – информации нет.

улучшение – добавить взаимодействие с пользователем и с помощью GUI запрашивать информацию, нажимая на кнопочки.

3) get_available_dates()

входные переменные – title (название графика), x_lab (название оси икс), y_lab (название оси игрек), x_row (данные для оси икс), y_row (данные для оси игрек), line_names (название линий), SwitchSideOfY=0 (переместить ли ось игрек слева-направо)*

*нужно для корректного одновременного отображения графика объема продаж и скользящей средней. 

Данная функция возвращает сразу 2 значения, первое это – с какой даты доступна запрашиваемая бумага, второе – по какую дату. Тут также есть проверка на ошибку, в случае ошибки вернется warning.

улучшение – добавить GUI, кнопки. Сделать отдельную функцию, которая будет делать запрос общего образца, и его можно будет модифицировать в зависимости от характера запроса.

4) plot_any()

входные переменные – title (название графика), x_lab (название оси икс), y_lab (название оси игрек), x_row (данные для оси икс), y_row (данные для оси игрек), line_names (название линий), SwitchSideOfY=0 (переместить ли ось игрек слева-направо)

Данная функция была сделана для построения графика общего типа, т.к. далее по заданию я буду делать это неоднакратно. Это облегчило остальные функции по построению отдельных видов графиков.

улучшение – упрощение логики с отображением легенды

5) plot_bar()

входные переменные – x_row (данные для оси икс), y_row (данные для оси игрек)

Функция строит столбчатый график, поэтому его реализацию я выделил отдельно. В нашем задании этот график использовался для отображения объема сделок.

6) plot_low_high() 

входные переменные – data (данные по котировке формата пандас)

Даннаяя функция строит график минимального и максимального значения за день.  

7) plot_open_close()

входные переменные – data (данные по котировке формата пандас)

Даннаяя функция строит график цены открытия и закрытия.

8) plot_mov_av() 

входные переменные – data (данные по котировке формата пандас), window (окно), volume (объем)

Даннаяя функция строит график скользящей средней и объема торгов (по запросу). 

9) plot_candle()

входные переменные – data (данные по котировке формата пандас)

Даннаяя функция строит график скользящей средней. 

10) get_plot_RSI()

входные переменные – data (данные по котировке формата пандас), n , doplot

11) rescale()

12) make_data_for_corr()



